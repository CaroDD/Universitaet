!!!
Zusammenfassung:
	Binärzahlsystem ist am nützlichsten für Computerarithmetik
	Oktal und Hex bieten eine praktische Kurzhandnotation
	Zweierkomplement die häufigste Notation für vorzeichenbehaftete Zahlen		
!!!

Informationsverarbeitung:

Zahlensysteme (Stellenwertsysteme):
Polyadische Zahlensysteme (Positional Number System)

Ziffernfolge (Vor- und Nachkomma):
sum_(k=-infty)^(n) [a_k B^k] mit B ≥ 2, 0 ≤ a_k < B, a_k ∈ N

Stellenwertsysteme sind gekennzeichnet durch:
--> Darstellung einer Zahl durch eine Ziffernfolge (Aneinanderreihung)
--> Der Wert einer Ziffer hängt von der Stellung innerhalb der Ziffernfolge ab.
--> Die Wertebildung erfolgt zu einer einheitlichen Basis B 
--> Die Basis ist die kleinste, nicht mehr durch eine Ziffer darstellbare Zahl.
--> Der Wert der Zahl ergibt sich durch Aufsummierung ihrer Ziffernwerte.
--> Dezimalsystem ( B = 10 ), Dualsystem ( B = 2 ), Hexadezimalsystem ( B = 16 )

Zahlenbereiche
== Menge von Zahlen, in der eine Ordnung erklärt ist und gewisse mathematische Verknüpfungen, Operationen uneingeschränkt ausführbar sind (keine natürliche
Ordnung für komplexe Zahlen)
--> Die Menge der natürlichen Zahlen N dient dem Abzählen.
--> Die Menge der ganzen Zahlen Z entsteht aus N indem man negative Zahlen als Inverse bzgl. der Addition konstruiert.
--> Die Menge der nichtnegativen Brüche Q^∗ entsteht aus N indem man Bruchzahlen als Inverse der Multiplikation konstruiert.
--> Die Menge der Brüche oder rationalen Zahlen Q entsteht aus Q^∗ durch Hinzunahme der Inversen bzgl. der Addition oder aus Z durch Hinzunahme der Inversen bzgl. der Multiplikation.
--> Die Menge der reellen Zahlen R entsteht aus Q durch topologische Vervollständigung (z.B. Werte für e, π (pi) ).
--> Die Menge der komplexen Zahlen C besteht aus Paaren reeller Zahlen (a, b) , die in der Schreibweise a + bi mit i^2 = −1 den üblichen Rechengesetzen genügen

Zahlenbereich			Definition 				uneing. Operation
N natürliche Zahlen		N = { 0,1,2,...}			+, . , <
Z ganze Zahlen			Z = { m − n, m,n ∈N}			+,−,·,<
Q^∗ gebrochene Zahlen		Q^∗ = { m/n , m,n ∈ N, n != 0}		+,·,/,<
Q reelle Zahlen			Q = { a/b , a,b ∈ Z, b !=0}		+,−,·,/,<
R rationale Zahlen		a 0 ,a 1 a 2 ... ∞ -Dezimalbruch	+,−,·,/,<,lim
C komplexe Zahlen		C = [a; b], a,b ∈ P (Paare)		+,−,·,/,lim

Vier wichtige Nummernsysteme

System			Warum? Why?						Anmerkungen
Dezimal  		10 Finger fingers
Binär			AN/AUS Systeme						3 mal mehr Ziffern als dezimal
Oktal			Kurzschreibweise für die Arbeit mit Binärdateien	3 mal weniger Ziffern als binär (?)
Hex			------- do ---------					4 mal weniger Ziffern als binär (?)

Ganze Zahlen im Stellenwertsystem:

Die Zifferndarstellung einer n-stelligen ganzen Zahlen Z_B lautet im Stellwertsystem der Basis B :
Z_B = ±(z_(n−1) ...z_1 z_0)_B 

Der Wert von Z_B bestimmt sich durch :
Z_B = ± sum_(i=0)^(n-1) [z_i · B^i = ±(z_(n−1) · B^(n−1) + ···+ z_1 · B^1 + z_0 · B^0 )

Beispiele:
Z_2 = 1010011010_(2) = sum_(i=0)^(9) [z_i · 2^i] = 1 · 2^1 + 1 · 2^3 + 1 · 2^4 + 1 · 2^7 + 1 · 2^9 = 666_(10)
Z_8 = −4321_(8) = sum_(i=0)^(3) [z_i · 8^i] = −(1 · 8^0 + 2 · 8^1 + 3 · 8^2 + 4 · 8^3 ) = −2257_(10)

Echt gebrochene Zahlen im Stellenwertsystem:
Die Zifferndarstellung einer gebrochenen Zahl R_B , die kleiner als 1 ist (Nachkommazahl), lautet im Stellenwertsystem der Basis B :
R_B = ±(0,z_(−1) z_(−2) ...z_(−m) )_B 

Der Wert von R_B bestimmt sich durch :
R_B = ± sum_(i=1)^(m) [z_(−i) · B^(−i)] = ±(z_(−1) · B^(−1) + z_(−2) · B^(−2) + ···+ z_(-m) · B^(−m) )

Beispiele zu gebrochenen Zahlen:
R_10 = −0,5362_(10) = − sum_(i=1)^(4) [z_(−i) · 10^(−i)] = −(5 · 10^(−1) + 3 · 10^(−2) + 6 · 10^(−3) + 2 · 10^(−4) )
R_2 = 0,110_2 = sum_(i=1)^(4) [z_(-i) · 2^(−i)] = 1 · 2^(-1) + 1 · 2^(−2) = 0,75_10

Number system 		Radix		Symbols
Binär Binary		2		{0,1}
Oktal Octal		8		{0,1,2,3,4,5,6,7}
Dezimal Decimal		10		{0,1,2,3,4,5,6,7,8,9}
Hexadecimal		16		{0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f}

There are 10 kinds of people in the world – those who
understand binary and those who don‘t.

Signed Binary Numbers:
Negative Zahlen Darstellung:
	Drei Arten von Darstellungen sind üblich
		1. Signierte Grösse / Signed Magnitude (SM)
			[0,1] {............}
			Left most: Sign bit; {} n-1 magnitude bits
			0 indicates +ve
			1 indicates -ve
			8 bit representation for +13 is 0 0001101
			8 bit representation for -13 is 1 0001101

		2. Eins Komplement 
			Sei N eine n-bit-Zahl und Ñ(1) sei das 1-C der Zahl. Dann,
			Ñ(1) = 2^(n) - 1 - N
			Die Idee ist, positive Zahlen so zu belassen, wie sie sind, aber negative Zahlen durch die 1 von K ihrer Grösse darzustellen.
			Beispiel: Sei n = 4. Wie Gross ist die 1-K-Darstellung für +6 und -6?
			--> +6 ist repräsentiert als 0110 (wie üblich in binär)
			--> -6 wird durch das 1-Komplement seiner Grösse dargestellt
			1 c-Komplement von -6 berechnen:
				1) 2^4 - 1 - |N| = (16 - 1 - 6)_(10) = 9_(10) = (1001)_(2)
				2) Komplementierung: 6_(10) = (0110)_(2) --> 2^4 - 1 - |N| = (16-1)_(10) - |N| = (15)_(10) - |N| = (1111)_(2) - |N| --> (1111)_(2) - (0110)_(2) = (1001)_(2)
				--> Tausche 1 & 0!!! 

		3. Zwei Komplement
			Sei N eine n-bit-Zahl und Ñ(2) sei das 2-C der Zahl. Dann,
			Ñ(2) = 2^n - N
			Wiederum ist die Idee, positive Zahlen so zu belassen, wie sie sind, aber negative Zahlen durch die 2 von C ihrer Grösse darzustellen.
			Beispiel: Sei n = 5. Wie Gross ist die 2-C-Darstellung für +11 und -13?
			--> +11 ist repräsentiert als 0110 (wie üblich in binär)
			--> -13 wird durch das 2-Komplement seiner Grösse dargestellt
			2 C-Komplement von -13 berechnen:
				1) 2^5 - |N| = (32)_(10) - (13)_(10) = (19)_(10) = 10011_(2) 
				2) Komplementierung: 13_(10) = 01101_(2) --> 2^5 - |N| = (2^5 – 1 – |N|) + 1 = 1’s C + 1
				-->  Tausche 1 & 0 , dann addiere 1 !!!

Vorzeichenbehaftete Zahlen:
4-bit No.	SM(signierte Magnitude)		1's C		2's C
0000		+0				+0		0
0001		1				1		1
0010		2				2		2
0011		3				3		3
0100		4				4		4
0101		5				5		5
0110		6				6		6
0111		7				7		7
1000		-0				-7		-8
1001		-1				-6		-7
1010		-2				-5		-6
1011		-3				-4		-5
1100		-4				-3		-4
1101		-5				-2		-3
1110		-6				-1		-2
1111		-7				-0		-1

Vorzeichenlose natürliche Zahlen (unsigned binary numbers):
Die Darstellung erfolgt als n-stellige Dualzahl. Eine Darstellung von negativen Zahlen ist nicht direkt möglich.
Wertebereich: 0 ≤ x ≤ 2^n − 1

Beispiel für Dualzahlen-Darstellung (n = 8) :
dezimal		dual
+0 		0000 0000
+3  		0000 0011
+127 		0111 1111

dezimal		dual
128		1000 0000
131		1000 0011
255		1111 1111
Anwendung: Speicheradresse

Vorzeichenbehaftete ganze Zahlen (signed binary numbers):
Die Darstellung erfolgt als n-stellige Dualzahl, wobei das Vorzeichen durch
verschiedene Verfahren realisiert wird:
--> Vorzeichen-Wert-Darstellung
--> Basiswert-Darstellung
--> 1-Komplement-Darstellung
--> 2-Komplement-Darstellung
Die Wertebereiche der Darstellungen unterscheiden sich je nach der Realisierung des Vorzeichens.
Anwendung: Integer-Arithmetik

Vorzeichen-Wert-Darstellung:
Das höchstwertigste Bit (MSB) der Dualzahl wird für die Darstellung des Vorzeichens genutzt: ( 0 -positiv, 1 -negativ), die restlichen Stellen als n − 1 Bit
lange vorzeichenlose ganze Zahl.
Wertebereich: −2^(n−1) + 1 ≤ x ≤ 2^(n−1) − 1
Es gibt zwei Darstellungen für die Zahl 0 : +0 und −0
Beispiel für Vorzeichen-Wert-Darstellung ( n = 8 ):
dezimal		dual
+0 		0000 0000
+3 		0000 0011
+127		0111 1111

dezimal		dual
−0 		1000 0000
−3 		1000 0011
−127 		1111 1111

Basiswert-Darstellung (biased):
Darstellung vorzeichenbehafteter ganzer Zahlen x als positive Dualzahl d mit einer festen Basiswertverschiebung B .
x = d − B --> d = x + B ≥ 0
Eindeutige Darstellungen der 0
Wertebereich: −B ≤ x ≤ 2^n − 1 − B (symmetrisch für B = 2^(n−1) − 1 )
Beispiel für Vorzeichen-Wert-Darstellung ( n = 8 , B = 127 ):
dezimal		dual
+0 		0111 1111
+3 		1000 0010
+128 		1111 1111

dezimal		dual
−0 		−
−3 		0111 1100
−127		0000 0000

1-Komplement-Darstellung:
Darstellung negativer ganzer Zahlen x durch das 1-Komplement (1) x
^(1) x = (2^n − 1) − x → (1) x + x = (2^n − 1) = 0
Wertebereich: −2^(n−1) + 1 ≤ x ≤ 2^(n−1) − 1
Es gibt zwei Darstellungen für die Zahl 0 : +0 und −0
Negative Zahlen sind durch eine 1 im höchstwertigen Bit (MSB) gekennzeichnet.
Beispiel für 1-Komplement-Darstellung ( n = 8 ):
dezimal		dual
+0 		0000 0000
+3 		0000 0011
+127		0111 1111

dezimal		dual
−0 		1111 1111
−3 		1111 1100
−127 		1000 0000

Bildungsvorschrift für das 1-Komplement (Stellenkomplement):
Stelleweise Negation von x : ^(1) x → (x_ν für ν = 1 ...n − 1) [x mit Querstrich oben == \x]
Daraus folgt:
^(1) x + x = x_(n−1) x_(n−2) ...x_0 + \x_(n−1) \x_(n−2) ...\x_0
	  = 1_(n−1) 1_(n−2) . . . 1_0 = 2^n − 1
x_ν + \x_ν = 1
^(1) ( ^(1) x) = x → −(−x) = x

Hin- und Rücktransformation (positive Zahl ↔ negative Zahl) sind identisch.
Beim Rechnen mit dem 1-Komplement kann ein Fehler auftreten.
Ist bei s = a + b der auslaufende Übertrag 1, so wird s = a + b + 1 korrigiert.

2-Komplement-Darstellung:
Darstellung negativer ganzer Zahlen x durch das 2-Komlement ^(2) x .
^(2) x = (2^n ) − x   → ^(2) x + x = 2^n = 0
Wertebereich: −2^(n−1) ≤ x ≤ 2^(n−1) − 1
Eindeutige Darstellungen für die Zahl 0 ( 2^n ausserhalb des Darstellungsbereiches)
Negative Zahlen sind durch eine 1 im höchstwertigen Bit (MSB) gekennzeichnet.
Beispiel für 2-Komplement-Darstellung ( n = 8 ):
dezimal		dual
+0 		0000 0000
+3 		0000 0011
+127 		0111 1111
dezimal		dual
−0 		−
−3 		1111 1101
−128		1000 0000

Bildungsvorschrift für das 2-Komplement (echtes Komplement):
Stelleweise Negation von x (1-Komplement) und anschließende Inkrementierung (1-Addition): ^(2) x = ^(1) x + 1
Daraus folgt: ^(2) x + x = x_(n−1) x_(n−2) ...x_0 + \x_(n−1) \x_(n−2) ...\x_0 + 1 = 1_(n−1) 1_(n−2) ...1_0 + 1 = 2^n
x_ν + \x_ν = 1
^(2) ( ^(2) x) = x → −(−x) = x
Hin- und Rücktransformation (positive Zahl ↔ negative Zahl) sind identisch.
Die 2-Komplementdarstellung für negative ganze Zahlen wird in der Computertechnik am häufigsten angewendet.

Addition und Subtraktion:
• Die Darstellung negativer Dualzahlen erfolgt durch das 2-Komplement.
• Die Konvertierung positiver Dualzahlen in negative und umgekehrt erfolgt am
einfachsten durch bitweise Negation der Dualzahl und anschließender Inkrementierung (1-Addition).
• Negative Zahlen sind durch die 1 im MSB gekennzeichnet.
• Die Subtraktion entspricht einer Addition mit einer negativen Zahl.
a − b = a + (−b)
• Die Addition wird analog zur Addition vorzeichenloser ganzer Zahlen
durchgeführt (bitweise modulo-2 Addition mit Übertrag).
• Ein Überlauf (Wertebereichsüberschreitung) liegt vor, wenn beim
höchstwertigsten Bit (MSB) der einlaufende und der auslaufende Übertrag
unterschiedlich sind

Multiplikation und Division (Rückführung auf Vorzeichen-Wert-Darstellung)
1. Überführung der 2-Komplement-Darstellung negativer Zahlen in die Vorzeichen-Wert-Darstellung.
2. Multiplikation bzw. Division der vorzeichenlosen Beträge analog zu vorzeichenlosen ganzen Zahlen.
3. Gesonderte Bestimmung des Vorzeichens (gleiche Vorzeichen - positives Ergebnis, unterschiedliche Vorzeichen - negatives Ergebnis).
4. Überführung der Vorzeichen-Wert-Darstellung negtiver Ergebnisse in die 2-Komplement-Darstellung.
Booth-Recording: Direkte Verarbeitung von Zweierkomplement-Darstellungen bei der Multiplikation.

B-Komplement ganzer Zahlen im Stellenwertsystem (1):
Das B-Komplement ^(B) Z_B einer ganzen Zahl Z_B im Stellenwertsystem der Basis
B ist definiert durch ( n Anzahl der Ziffern):
Z_B + ^(B) Z_B = B^n
mit Z_B = sum_(i=0)^(n-1) [ z_i B^i ]
und B^n = 1 + sum_(i=0)^(n-1) [(B − 1) B^i

Der Wert dieses Komplements berechnet sich zu:
^(B) Z_B = B^n − Z_B = 1 + sum_(i=0)^(n-1) [(B − 1) B^i] - sum_(i=0)^(n-1) [z_i B^i] = 1 + sum_(i=0)^(n-1) [(B − 1 − z_i) B^i] 

Die beim B-Komplement auftretende Summe heißt (B − 1) -Komplement:
^(B−1) Z_B = sum_(i=0)^(n-1) [(B − 1 − z_i) B^i]
und das B-Komplement damit: ^(B) Z_B = ^(B−1) Z_B + 1

Beispiele zum B-Komplement:
Zehn-Komplement von Z_10 = 51 (n = 2):
	^(10) Z_10 = 10^2 − 51 = 100 - 51 = 49 
Neun-Komplement von Z_10 = 51 (n = 2) : 
	^(9) Z_10 = 10^2 - 1 - 51 = 99 - 51 = 48

Zwei-Komplement von Z_2 = 0101 (n = 4) : 
	^(2) Z_2 = 10000 − 0101 = 1011
	(dezimal: 2 4 − 5 = 11)
Eins-Komplement von Z_2 = 0101 (n = 4) :
	^(1) Z_2 = 10000 − 0001 − 0101 = 1111 − 0101 = 1010
	(dezimal: 2 4 − 5 − 1 = 10)

Nummernsystem und Computer
Hinweise:
	Nummern immer in 4er Gruppen angeordnet (besser lesbar)
	Standardmäßig dezimal (wenn nichts anderes angegeben ist)

System		Representation 		Example for 20
Hexadecimal 	0x... 			0x14
Binary 		0b... 			0b10100
Octal 		0o... (zero and ‘O’) 	0o24

	Adressen in hexadezimal geschrieben (kompakte Darstellung & einfaches Verstehen durch ihre Hardwarestruktur)
	Im Bereich 0x000 – 0xFFF werden 12 bits gebraucht, 4000 Orte
		Tipp: 10 bits = 1K













