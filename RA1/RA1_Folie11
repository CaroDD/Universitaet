Speicherarchitektur - Cache

Inhalt:
- Cache-Konzept
- Associativity
- Größe Berechnungen
- Read – Write – Replace Strategie

Cache-Speicher:
- CAM-Speicher (Content Addressable Memory) als Pufferspeicher zur Überbrückung
	bzw. Anpassung stark unterschiedlicher Zugriffszeiten (z.B. Prozessorregister –
	Hauptspeicher – Festplatte).
- Der Cache arbeitet inhaltsorientiert, ist nicht direkt adressierbar. Der Vergleich mit
	dem Inhalt kann auch maskiert erfolgen (Ausblenden einzelner Bits). Ein Cache-Zugriff
	ist nicht immer eindeutig.
- Im Cache werden nur Kopien der aktuellen Speicherinhalte der darunter liegenden
	Hierarchieebene abgebildet. Die aktuellen Daten einer Hierarchieebene befinden
	sich auch immer in allen darunter liegenden.
- Zur Überbrückung sehr großer Differenzen in der Zugriffszeit bzw. im Datendurchsatz
	können auch mehrere Caches hintereinander geschaltet werden (Primary Cache,
	Secondary Cache, übliche Bezeichnung L1, L2, ... Ln).
- Der Cache-Speicher kann sich mit auf dem CPU-Chip befinden (On-Chip Cache, oft
	nur L1) oder extern (Off-Chip Cache).
- In Multiprozessorsystemen teilen sich u.U. mehrere CPUs einen Cache (z.B. L3, L4)

Cache-Begriffe:
Adressspeicher (Tag-RAM):
		Hauptspeicheradresse bzw. Adressteil des Datenblockes (Cache-Line).
	Valid-Bit: Cache-Inhalt bzgl. der Adresse ist aktuell, gültig.
	Dirty-Bit: Cache- und Hauptspeicherinhalt der Adresse sind nicht konsistent.
Datenspeicher (Data-RAM):
	Datenblöcke (Cache-Line): Blöcke des Cache-Speichers --> Blockprinzip.
	Datenblockgröße (Cache-Line-Size): Blockgröße in Worten (Byte).
Cache-Treffer (Cache-Hit):
	Daten / Befehle aktuell im Cache gefunden.
	Trefferrate (Hit-Rate): Maß für die Effizienz des Caches.
Cache-Fehlzugriff (Cache-Miss):
	Daten / Befehle nicht im Cache gefunden bzw. nicht aktuell.
	Fehlerrate (Miss-Rate): 1 - Trefferrate.
	Fehlerzuschlag (Miss-Penalty): Zugriffszeit nach Cache-Fehlzugriff.

Cache-Eigenschaften:
Struktur:
	Ein Cache-Eintrag besteht aus dem Datenblock (Cache-Line --> Blockprinzip)
	und dessen Adresse, Adressteil als Tag (Etikett) sowie Statusinformationen.
Sichtbarkeit:
	Transparent (nicht sichtbar im Befehlssatz) oder nicht transparent (sichtbar,
	wird durch den Befehlssatz gesteuert, z.B. Laden, Invalidieren, . . . ).
Adressraum:
	Realer Adressraum (realer Cache) oder virtueller (virtueller Cache).
Architektur:
	Befehle und Daten gemeinsam (Unified Cache) oder getrennt (Split Cache).
Organisation:
	Lösung der Probleme der Speicherhierarchie: Abbildung, Identifikation,
	Ersetzung, Aktualisierung, Konsistenz, Kohärenz.

Struktur des Caches: Folie 7 & 8

Cache-Adressraum: -> Folie 9
Virtueller Cache					Realer Cache
- schnell, Cache und MMU nebenläufig			- langsam, Adressen durch MMU
- Invalidierung bei Prozesswechsel,			- direkter I/O-Cache-Transfer
  notwendig, da gleiche Adressen möglich		  möglich, da reale Adressen
- besondere Eignung als Befehls-Cache,			- für Snooping geeignet,
  da Rückschreiben entfällt				  da 1:1 Adress-Daten-Abbildung

Cache-Architekturen:
Harvard - Architektur:
Split Cache, getrennt für Daten und Befehle (separate Lokalitäten)
Princeton - Architektur:
Unified Cache, gemeinsam für Daten und Befehle (überlagerte Lokalitäten)

Cache Assoziativität:
Vollassoziativer Cache (fully-associative)
Ein Speicherblock des HS (Hauptspeicher) kann sich in einer beliebigen Cache-Zeile des
Caches befinden. Der Cache besteht aus einem Satz (s=1) mit k=n_cl Zeilen
	--> k-fach assoziativ (k-Wege).

Direkt abgebildeter Cache (direct-mapped)
Ein Speicherblock des HS kann sich nur in einer bestimmten Zeile des
Caches befinden. Die Zeile wird durch den Index in der HS-Adresse
festgelegt. Der Cache besteht aus s=n_cl Sätzen mit je einer Cache-Zeile (k=1)
	--> 1-fach assoziativ (1-Weg).

K-Wege satzassoziativer Cache (k-way set-associativ)
Ein Speicherblock des HS kann sich nur in einem bestimmten Satz des
Caches befinden. Der Satz wird durch den Index in der HS-Adresse
festgelegt. Der Cache besteht aus s=n_cl /k Sätzen mit je k Cache-Zeilen
	--> k-fach satzassoziativ (k-Wege).

Cache-Berechnungen:
w_a Bitanzahl der Hauptspeicheradresse
w_t Bitanzahl der Tag-Adresse
w_i Bitanzahl der Index-Adresse
w_w Bitanzahl der Wort-Adresse		n_w = 2^(w_w) Anzahl der Wörter je Cache-Zeile
w_b Bitanzahl der Byte-Adresse		n_b = 2^(w_b) Anzahl der Byte je Wort
n_cl Anzahl der Cache-Zeilen
s Anzahl der Sätze (Mengen)		s = 2^(w_i)
k Assoziativität im Satz
c_cl Kapazität der Cache-Zeile (Byte)
c_d Kapazität des Daten-Speichers (Byte)
c_t Kapazität des Tag-Speichers, ohne V,D
c_s = k × c_cl Kapazität eines Satzes (Byte)


Cache-Berechnungen:
Hauptspeicheradresse (Aufteilung)
w_a = w_t + w_i + w_w + w_b 	(Summe der Bitanzahlen)

Cache-Zeilengröße (cache line size)
c_cl = 2^(w_w) × 2^(w_b) Byte 
	= n_w × n_b Byte
	(Wort-Anzahl je Cache-Zeile * Byte-Anzahl je Wort)

Cache-Zeilenanzahl
n_cl = 2^(w_i) × k = s × k	(Satz-Anzahl je Cache * Assoziativität je Satz)

Daten-Speichergröße
c_d = n_cl × c_cl	(Cache-Zeilenanzahl * Cache-Zeilengröße)


Tag-Speichergröße (ohne V,D)
c_t = w_t ⋅ n_cl Bit	(Bitanzahl der Tagadresse * Cache-Zeilenanzahl)


Cache-Analyse:
Beispielaufgabe: Ein 4-fach satzassoziativer Cache hat eine Daten-
Speichergröße von 4 MiByte. Die Cache-Zeile enthält 16 Worte zu je 4 Byte.
Bestimmen Sie die Aufteilung der Hauptspeicheradresse (32 bit) sowie die
Größe des Tag-Speichers, ohne V- und D-Bit!
1. Bitanzahl der Wort-, Byteadresse:
w_w = ld 16 = 4,
w_b = ld 4 = 2

2. Cache-Zeilengröße
w_t = w_a - ( w_i + w_w + w_b ) = 12
c_cl = n_w × n_b = 64 Byte

3. Daten-Speichergröße
c_d = n_cl × c_cl  
n_cl = c_d / c_cl = (4 × 2^20)/ 64 = 2^16

4. Cache-Zeilenanzahl 
n_cl = 2^(w_i) × k
w_i = ld((n_cl)/k) = ld((2^16)/4 = 14

5. Bitanzahl der Tag-Adresse
w_a = w_t + w_i + w_w + w_b
w_t = w_a - (w_i + w_w + w_b) = 12

6. Tag-Speichergröße
c_ct = w_t × n_cl = 3 × 2^18 Bit

w_a = 32, w_t = 12, w_i = 14
w_w = 4, w_b = 2, ct = 3 × 2^18 Bit











































