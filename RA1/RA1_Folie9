Befehlssatz

Inhalt:
- Begriffserklärung
- Klassifikationen von Befehlssatz-Architekturen
- Operandenspeicherung innerhalb der CPU
- Explizit im Befehl adressierte Operanden
- Operandenspeicherung, Adressierung
- Operationen des Befehlssatzes
- Typ und Länge der Operanden
- Beispiele zu Befehlssatz-Architekturen
- JVM (STACK)
- R2000 (MIPS)
- ALPHA AXP
- Intel Pentium II
- UltraSPARC II
- AT91 ARM
- AMD Athlon

Begriffserklärung:
Algorithmus: Die Informationsverarbeitung in einem Rechner erfordert die
	schrittweise Umsetzung eines definierten Algorithmus. Der Algorithmus wird
	als geordnete Folge von Anweisungen, Befehlen dargestellt.
Befehl: Ein Befehl (instruction) ist eine eindeutig spezifizierte Arbeitsanweisung
	an den Prozessor (CPU). Er ordnet eine Operation an, die in der Regel an
	spezifizierten Daten (Operanden) vorzunehmen ist und ein Ergebnis
	(Resultat) liefert. (maschinenlesbar → Maschinenbefehl)
Befehlssatz: Der Menge aller in einem Prozessor implementierten Befehle
	bildet den Befehlssatz. Die Architektur eines Rechners wird wesentlich durch
	den Befehlssatz des verwendeten Prozessors bestimmt (ISC-Instruction Set
	Computer → wesentliches Architekturmerkmal).
	Die Menge aller Maschinenbefehle definiert die Maschinensprache.
Befehlskomponenten: Die Komponenten eines Befehlssatzes sind die
	Operation, der Datentyp und die Operanden, Adressierung des Befehls.
Maschinensprache: Durch die Menge der im Prozessor realisierbaren
	Maschinenbefehle ist eine hardwareabhängige Programmiersprache für den
	Rechner, die Maschinensprache gegeben → Maschinenprogramme.
	Rechner einer Prozessorfamilie realisieren eine weitestgehend ähnliche
	Maschinensprache (Binärkompatibilität).

Hauptmerkmale des Befehlssatzes:
Befehlsvorrat: Die Menge aller verfügbaren Maschinenbefehle bildet den
	Befehlsvorrat. Sie werden in der Befehlsliste geordnet zusammengefaßt.
Befehlsformat: Die innere Struktur der Maschinenbefehle, dargestellt durch
	Binärworte, wird durch das Befehlsformat bestimmt. Entsprechend dem
	Befehlsformat werden die einzelnen Komponenten des Befehls binär codiert
	im Befehlswort zusammengefaßt.
Orthogonalität: Ein Befehlssatz heißt orthogonal, wenn eine möglichst kleine
	Anzahl von grundlegenden Befehlen existiert, die beliebig miteinander
	kombinierbar sind und sich in ihrer Funktionalität nicht oder nur wenig
	überschneiden. Die Komponenten eines Befehlssatzes (Operation, Datentyp,
	Adressierung) sollten orthogonal zueinander sein (voneinander unabhängig).
	Jede Operation sollte jede relevante Adressierungsart bzw. jeden relevanten
	Datentyp zulassen.
Symmetrie: Ein Befehlssatz heißt symmetrisch, wenn jeder Befehl mit jedem
	relevanten Datentyp ausgeführt werden kann, sowie jede zulässige
	Adressierungsart benutzt werden kann.
Regularität: Ein Befehlssatz heißt regulär, wenn er nach konsistent
	anwendbaren Regeln strukturiert ist. Regularität und Orthogonalität stehen in
	enger Wechselbeziehung.

Befehlsstruktur:
Die Befehlskomponenten (Operation, Datentyp und Operanden, Adressierung)
werden im Befehlswort strukturiert zusammengefaßt und binär codiert. Die
Befehlswortlänge ist allgemein nicht für jeden Befehl des Befehlssatzes einheitlich (byteweise abgestuft).
Operationscode =  Operationsteil (Opcode)
Operand & Adresse & ... = Operandenteil (Adressteil)
Die Positionen von Opcode und Adressteil sind nicht fest (der Opcode kann am
Anfang oder Ende des Befehlswortes stehen aber auch über das Befehlswort verteilt sein).
Der Operandenteil kann je nach Befehlsformat gleichzeitig auch mehrere
Operanden und oder Adressen, wie auch andere Informationen enthalten.

CISC/RISC:
Je nach Umfang des im Prozessor realisierten Befehlssatzes können zwei
Kategorien von Befehlssatz-Architekturen (ISA) unterschieden werden:
1. CISC (Complex Instruction Set Computer)
	Befehlsvorrat: 400..500 Befehle/Befehlsformate
	z.B.: DEC VAX, IBM 360, Intel x86
2. RISC (Reduced Instruction Set Computer)
	Befehlsvorrat: 40..50 Befehle/Befehlsformate
	z.B.: Sun SPARC, SGI MIPS, DEC ALPHA, HP PARISC, IBM PowerPC
Diese Unterscheidung beruht nicht primär auf Unterschieden in der Hardware-Realisierung, dem eingesetzten Betriebssystem, . . .

Motivation für RISC:
90/10 Regel beim Befehlssatz
Bei einem komplexen Befehlssatz (CISC) werden 90% aller Operationen mit nur 10% der Befehle des Befehlssatzes durchgeführt.
R. Chou und M. Horowitz: 
	"The goal of any instruction format should be: 
	(1) simple decode, 
	(2) simple decode, 
	(3) simple decode."
Albert Einstein: "Keep it simple, as simple as possible, but no simpler."

CISC:
• Befehlsworte und Opcode in komplexen Befehlsformaten mit variablen
	Längen und vielen komfortablen Adressierungsarten
• leistungsfähige, komplexe Befehle führen zu einer Verkürzung des
	Maschinenprogramms und damit zur Erhöhung der Codedichte
• Realisierung der Maschinenbefehle durch Ausführen von Mikroprogrammen
	im Prozessor (der Befehlszyklus wird durch eine Mikroprogramm-Steuerung realisiert)
• Anzahl der benötigten Taktzyklen pro Befehl ist unterschiedlich (mehr als 1 Taktzyklus/Befehl)

RISC:
• stark reduzierter Umfang an Befehlsformaten und Adressierungsarten (meist
	weniger als 4 Befehlsformate und 4 Adressierungsarten)
• einfache wenige Basisbefehle, aus denen komplexe Operationen
	zusammengestellt werden können
• Load/Store-Architektur, ALU-Befehle realisieren keine Speicherzugriffe,
	Speicherzugriffe erfolgen nur über Load/Store-Befehle
• Universalregister-Architektur (meist 32 oder mehr Universalregister)
• festverdrahtete Maschinenbefehle und fester Befehlszyklus, keine Mikroprogramm-Steuerung
• Ausführung der meisten Befehle in nur einem Taktzyklus

Klassifikationen von Befehlssatz-Architekturen:
Merkmale der Klassifikation
• Operandenspeicherung innerhalb der CPU, wo und wie
	- Zahl der explizit im Befehl adressierten Operanden
	- Operandenspeicherung, Adressierung, wie spezifiziert
	- Operationen des Befehlssatzes
	- Typ und Länge der Operanden, wie spezifiziert
• Alle bekannten Rechnerarchitekturen stellen temporären Operandenspeicher 
	innerhalb der CPU bereit (Register, Stack, Akkumulator).

Operandenspeicherung innerhalb der CPU:
Hauptvarianten, Alternativen der Operandenspeicherung
temporärer		explizite	Quelle für	Ziel für	Zugriff auf
Operandenspeicher 	Operanden 	Operanden 	Resultate 	Operanden

Stack			0 		Stack 		Stack 		PUSH/POP auf Stack
Akkumulator		1		ACCU/Speicher	ACCU		LOAD/STORE auf ACCU
Registersatz		2 oder 3	Register/	Register/	LOAD/STORE auf Register
(Universalregister)			Speicher 	Speicher

Stack-Architektur (stack architecture):
	Stack - Speicher nach dem LIFO Prinzip (last in - first out)
	SP - stack pointer (Zeiger auf zuletzt eingetragene Daten)
	PUSH - Operand vom Speicher in den Stack transportieren, automatisches pre-dekrement
	POP - Operand vom Stack in den Speicher transportieren, automatisches post-inkrement

Akkumulator-Architektur (accumulator architecture):
	ACCU - Akkumulator (Universalregister)
	LOAD - Operand vom Speicher in den ACCU transportieren
	STORE - Operand vom ACCU in den Speicher transportieren

Universalregistersatz-Architektur (GPR architecture):
	GPR - Universalregistersatz (general-purpose register file)
	LOAD - Operand vom Speicher in den GPR transportieren
	STORE - Operand vom GPR in den Speicher transportieren

Vor- und Nachteile der Architekturtypen:

Typ 		Vorteile 		Nachteile
Stack 		einfachstes Modell, 	kein direkter Zugriff auf Stack,
		gute Codedichte 	nur relativ zum SP → Engpass
ACCU		kurze Befehle		ACCU ist einziger temporärer Speicher,
		minimale Hardware 	höchster Speicherverkehr → Engpass
GRP 		allgemeinstes Modell, 	alle Operanden explizit adressieren,
		Zwischenspeicherung 	lange, komplexe Befehlswörter,
		der Operanden		schlechte Codedichte


Motivation für Universalregister-Architekturen
1. Register erlauben einen schnelleren Zugriff auf die Operanden
2. einfachere Adressierung der Register (kurze Adresslängen)
3. Einbeziehung der Spezialregister in den Universalregistersatz
4. nutzbar als zusätzliche Ebene in der Speicherhierarchie
5. vielfältige Möglichkeiten der Zwischenspeicherung von Operanden
6. für Compiler einfacher und effektiver nutzbar (z.B. Variablenübergabe)

Explizit im Befehl adressierte Operanden
Grundsätzlich werden unterschieden:
monadische Operation: (unäre, einstellige Operation) B := op A
dyadische Operation: (binäre, zweistellige Operation) C := A op B

Für eine zweistellige Operation (Verknüpfung « op » von zwei Operanden zu
einem Resultat) sind mindestens folgende Angaben erforderlich:
• Art der Operation → op
• Adresse des 1. Operanden (1. Quelloperand) → A
• Adresse des 2. Operanden (2. Quelloperand) → B
• Adresse für das Resultat (Zieladresse) → C

Folgende zusätzliche Angaben sind bei vollständiger Beschreibung eines
Befehls mit Programmverzweigungen noch denkbar:
• Adresse des 1. Folgebefehls ohne Verzweigung → NI0
• Adresse des 2. Folgebefehls bei Verzweigung → NI1
Operanden und Resultate (Adressen und Befehle) stehen entweder in prozessorinternen temporären Speichern, z.B. Registern 
oder im Hauptspeicher. Beide werden durch Adressen angesprochen.
Die Codierung aller Angaben in einem Befehlswort führt zu einem 5-Adress-Befehl. Der Operandenteil umfaßt dabei die 1. und 2. Quelladresse
der Operanden, die Zieladresse für das Resultat und die beiden Adressen der möglichen Folgebefehle.

5-Adress-Befehlsformat:
Operationsteil = Opcode (op)
Operandenteil (Adressteil) = 1. Quelladr. (A) | 2. Quelladr. (B) | Zieladresse (C) | 1. Folgebefehl NI0 | 2. Folgebefehl NI1

Beispiel
Opcode: 		8 Bit		→ 256 verschiedene Befehle codierbar
Adressraum:		32 Bit		→ 4 GByte Speicher adressierbar
Befehlswortlänge:	168 Bit		→ 6 32-Bit-Worte pro Befehl

Übliche Befehlswortlängen z.B. 32 . . . 64 Bit ( → 168 Bit sehr uneffektiv)
→ Reduzierung des Operanden-/Adressteils (Erhöhung der Codedichte)

Massnahmen zur Reduzierung des Operandenteils:
• Befehlszähler: enthält die Adresse für den unmittelbaren Folgebefehl
• Verzweigungs-/Sprungbefehle: enthalten Adressen der Folgebefehle
• implizite Adressierung: Quell oder Zieladressen implizit im Operationsteil
• überdeckte Adressierung: gleichzeitige Nutzung als Quell-/Zieladresse
• Direktoperanden: Operanden werden direkt im Operandenteil codiert
• Registeradressen: gesonderter Adressraum, wesentlich kürzere Adressen
• mehrstufige Adressierung: Umrechnung der Quell- und Zieladressen

Befehlsformate:
- 3-Adress-Befehlsformat
- 2-Adress-Befehlsformat
- 1-Adress-Befehlsformat
- VLIW-Befehlsformat
	Aus mehreren Einzelbefehlen zusammengesetzter komplexer Befehl
	kein festes Befehlsformat, an Operation und Architektur angepasst
	speziell für die Nutzung von Parallelität, (z.B. DSP-Architekturen)


Zuordnung Befehlsformat - Architekturtyp:
Die GPR-Architektur (3-Adress-Maschine) ist bzgl. der verschiedenen
Befehlsformate am universellsten, alle Formate sind prinzipiell möglich.

Bei der Stack-Architektur (0-Adress-Maschine) ist die Universalität nicht direkt
sichtbar, Organisation und Funktionalität des Stacks im Zusammenhang mit der
ALU sind entscheidend.

Operandenspeicherung, Adressierung:
Folgende Betrachtungen nur für Universalregister-Architekturen!
Wesentliche Befehlssatz-Charakteristiken bzgl. der Operanden:
1. Operandenzahl (für typischen ALU-Befehl)
	2-Adress-Befehlsformat (diadisch)
	3-Adress-Befehlsformat (triadisch)
2. Zahl der Speicheradressen (Speicheroperanden)
	0 . . . 3 Adressen für Speicherzugriffe
Die Adressen des Operandenteils, die nicht für einen Speicherzugriff genutzt
werden, werden folglich entweder für Registeradressen oder auch für
Direktoperanden verwendet.

Kombinationen von Register- und Speicheradressen
Klassifizierung der Kombinationen Register-Speicher
(Typen von Universalregister-Architekturen):
RR	Register - Register	(Load/Store-Architektur)
RS	Register - Speicher
SS	Speicher - Speicher

Architekturen, die keinen Speicherzugriff für einen typischen ALU-Befehl
erlauben, werden auch Load/Store-Architekturen genannt.

Vor- und Nachteile der einzelnen Typen:
Typ 	Vorteile 			Nachteile
RR 	einfache Befehlscodierung 	höhere Befehlsanzahl
	feste Befehlswortlänge 		gesonderte Load/Store-Befehle
	einfache Codegenerierung 	relativ schlechte Codedichte
	einfache Taktsteuerung

RS 	Datenzugriff ohne gesonderte	Operanden nicht äquivalent
	Load/Store-Befehle
	gute Codedichte

SS	kompakteste Form		große Befehlslängenunterschiede
	keine Register für 		viele Speicherzugriffe
	Zwischenwerte
RISC-Befehlssätze → Load/Store-Architekturen (nicht generell)

Speicheradressierung:
Interpretation von Speicheradressen
Byte-orientierter Speicherzugriff (kleinste adressierbare Einheit)
→ Probleme bzgl. Byte-Reihenfolge bei Zugriff auf größere Einheiten
(Halbwort-, Wort-, Doppelwort-Zugriff, . . . )


Vereinbarungen zur Bytereihenfolge in einem Wort...
Bezeichnung		Bedeutung 				Beispiel
little endian 		Byteadresse x...x00 liegt bei		Intel 80x86,
byte ordering 		niedrigster Wertigkeit im Wort 		DEC VAX

big endian		Byteadresse x...x00 liegt bei		MIPS,
byte ordering 		höchster Wertigkeit im Wort		SPARC

Für die Verarbeitung im Rechner ist die Byte-Reihenfolge meist unbedeutend.
Probleme allgemein nur bei Byte-Wort-Umrechnungen.
Beim Datenaustausch zwischen Rechnern unterschiedlicher Byte-Reihenfolge
ist diese unbedingt zu beachten (ggf. Konvertierungen).

Speicher-Alignment:
Der Zugriff auf Einheiten, die größer als ein Byte sind, kann ausgerichtet (aligned)
oder nicht ausgerichtet (misaligned) erfolgen. Ein Zugriff zu einer Einheit der
Länge m Bytes ab der Byte-Adresse A ist ausgerichtet, wenn gilt: A mod m = 0 .

Alignment-Restriktion:
Soll z.B. auf ein Wort auf einer nicht ausgerichteten Halbwortgrenze (x...x010)
zugegriffen werden, so müssen bei ausgerichtetem Wortzugriff die beiden
benachbarten Worte (x...x000 und x...x100) eingelesen werden und
anschließend die darin enthaltenen Halbworte (x...x010 und x...x100) wieder zu
einem Wort zusammengesetzt (ausgerichtet) werden.
Ein nicht ausgerichteter Speicherzugriff erfordert im allgemeinen mehrere
ausgerichtete Zugriffe und eine anschließende Ausrichtung
(Ausrichtungsnetzwerk). Ausgerichtete Zugriffe sind allgemein schneller.
Ausgerichtete Zugriffe erfordern bei kürzeren Einheiten als die Registergröße
ebenfalls ein Ausrichtungsnetzwerk (Multiplexer-Netzwerk, Barrel-shifter).

Adressierung:
Operanden, Adressen und Befehle können im Hauptspeicher oder im
Registerspeicher stehen. Sie werden über ihre Adressen angesprochen, die aus
verschiedenen Komponeten zusammengesetzt sein können.

Adressen: Adressen beziehen sich auf Konstante (Direktoperand), Register
	(Registeradresse) oder den Hauptspeicher (Speicheradresse).

Statische, absolute Adressierung (physische Adressen): 
	Die physischen Adressen werden fest, statisch zur Programmierzeit
	angegeben. Programme und Daten sind vollständig lageabhängig.

Dynamische, relative Adressierung (effektive Adressen): Die effektive
	Adresse wird erst zur Laufzeit durch eine Adressrechnung gewonnen. Im
	Adresswerk werden dann aus den effektiven Adressen die eigentlichen
	physischen Adressen für die Adressierung gebildet.


Relative Adressierung:
Formale Notation der Adressrechnung
Hauptspeicheradresse		(Assembler)	:	A
Registeradresse			(Assembler)	:	RA
Direktoperand			(Assembler)	:	#Operand
Hauptspeicherinhalt von A	(Assembler)	:	(A) oder @(A) auch ((A))
Hexadezimalwert			(Assembler)	:	$HEX
Hauptspeicherinhalt von A			:	M[A]
Registerinhalt von RA				:	RA

Adressierungsarten:
Adressierungsarten sind alle Möglichkeiten eines Prozessors aus relativen
Adressen effektive/physische Adressen zu berechnen (zur Laufzeit).

Vorteile des effektiven Einsatzes der Adressierungsarten:
• Einsparung von Hauptspeicherplatz, Rechenzeit und Programmierzeit
• Lageunabhängigkeit der Daten und Programme (relative Adressierung) (Position-Independent Code, PIC)
• Wiederverwendbarkeit von Programmteilen (Unterprogrammtechnik, ...)
• Ermöglichung der wiederholten Befehlsausführung auf verschiedene Daten
	(z.B. Tabellen, Schleifen), sowie bedingten Operationen (Assembler-Programmierung)

Adressierungsarten:
Adress.art 			Beschreibung
implizit			Adressen, Operanden sind durch den Opcode selbst festgelegt
immediate			Operand wird im Befehl explizit mitgeführt (Direktoperand)
direkt				Adresse wird im Befehl explizit mitgeführt (Direktadresse)
indirekt 			Befehl enthält die Adresse des Speicherplatzes in dem sich
				die eigentliche Adresse befindet (Adresse von Adresse)
relativ				Befehl enthält einen Offset (Verschiebung) mit dem die Adresse
(based)				relativ zu einer Basisadresse (Basisregister) gebildet wird
indiziert			Befehl enthält eine Basisadresse, die durch Addition eines
				Index (Indexregister) modifiziert wird
segmentiert 			Adresse wird an den Inhalt eines Segmentregisters angehängt (concatenate, Seitenadressierung)
virtuell			Umsetzung einer virtuellen Adresse in eine physische

Übersicht Befehl – Register - Speicher
	--> Folie 39-41

Gebräuchliche Adressierungsarten
	--> Folie 42

Beispiele:
Adressierungsart 	Befehl (Assembler) 	Ergebnis (Zuweisung)
immediate 		ADD R2, #7 		R2 := R2 + 7
direkt 			ADD R2, R3 		R2 := R2 + R3
indirekt (Register) 	ADD R2, (R3) 		R2 := R2 + M[R3]
indirekt (Speicher) 	ADD R2, @(R3) 		R2 := R2 + M[M[R3]]
relativ (Displacement) 	ADD R2, 10(R3) 		R2 := R2 + M[10 + R3]
relativ-indiziert 	ADD R2, (R3+R4) 	R2 := R2 + M[R3 + R4]

Operationen des Befehlsatzes:
Bezüglich der Funktionalität sind vier Klassen von Befehlen unterscheidbar:
Operationstyp			Beispiel
Datenübertragung		Register-Register
				Register-Speicher
				Register-E/A

Datenmanipulation		arithmetische Operationen
				logische Operationen
				Schiebe-/Rotationsoperationen

Verzweigungen			Sprung- und Verzweigungsoperationen
(bedingt, unbedingt)		Prozedurrufe und -rückkehr
				Traps

Systemsteuerung			Betriebssystemrufe
				Speicherverwaltung
				Interrupts, Traps

Datenübertragung (Beispiele):
Befehl 	Bedeutung
LD	Laden eines Registers					load
ST	Speichern des Inhalts eines Registers			store
MOVE 	Übertragung (beliebige Richtung)			move
EXC	Vertauschen der Inhalte					exchange
TFR	Übertragung eines Registers in ein anderes		transfer
PUSH	Ablegen eines oder mehrerer Register in den Stack	push
POP	Laden eines oder mehrerer Register aus dem Stack	pop
READ	Lesen des Prozessor-Statusregisters			read
WRITE	Schreiben des Prozessor-Statusregisters			write
IN	Laden eines Registers aus einem Peripheriebaustein	input
OUT 	Übertragen eines Registers in einen Peripheriebaustein	output

Datenmanipulation, arithmetisch (Beispiele):
Befehl 	Bedeutung
ABS	Absolutbetrag				absolute
ADD	Addition				addition
SUB	Subtraktion				substract
MUL	Multiplikation				multiply
DIV	Division				divide
COM	Einerkomplement				complement
NEG	Vorzeichenwechsel, Zweierkomplement	negate
CLR	Löschen					clear
CMP	Operandenvergleich			compare
DAA	Dual-Dezimal-Umwandlung			decimal adjust
DEC	Dekrement				decrement
INC 	Inkrement				increment

Datenmanipulation, Boolsche (Beispiele):
Befehl 	Bedeutung 
AND 	AND-Verknüpfung 	and
OR 	OR-Verknüpfung 		or
EOR 	XOR-Verknüpfung 	exclusive or
NOT 	NOT-Verknüpfung		not

Datenmanipulation, Flag- und Bit- (Beispiele):
Befehl 	Bedeutung
SEF	Setzen eines Bedingungs-Flag		flag set
CLF	Löschen eines Bedingungs-Flag		flag clear
TST	Prüfen eines Flags oder Bits		test
BSET	Setzen eines Bit			bit set
BCLR	Rücksetzen eines Bit			bit clear
BCHG	Invertieren eines Bit			bit change
BFCLR	Rücksetzen der Bits eines Bitfeldes	clear bits
BFSET	Setzen der Bits eines Bitfeldes		set bits
BFFFO	Finden der ersten 1 im Bitfeld		find first one
BFEXT	Lesen eines Bitfeldes			extract bits
BFINS 	Einfügen eines Bitfeldes		insert bits

Datenmanipulation, String- oder Block- (Beispiele):
Befehl 	Bedeutung 
MOVS 	Transferieren eines Blocks 			move string
INS 	Einlesen eines Blocks von der Peripherie 	input string
OUTS 	Ausgabe eines Blocks an die Peripherie 		output string
CMPS 	Vergleich zweier Blöcke 			compare string
COPS 	Kopieren eines Blockes 				copy string
SCAS 	Suchen eines Zeichens in einem Block 		scan string

Datenmanipulation, Schiebe- und Rotation- (Beispiele):
Befehl 	Bedeutung 
SHF 	Verschieben eines Registerinhaltes 		shift
ASL 	arithmetische Links-Verschiebung 		arith. shift left
ASR 	arithmetische Rechts-Verschiebung 		arith. shift right
LSL 	logische Links-Verschiebung 			shift left
LSR 	logische Rechts-Verschiebung 			shift right
ROT 	Rotation eines Registerinhaltes 		rotate
ROL 	Rotation nach links 				rotate left
ROR 	Rotation nach rechts 				rotate right
SWAP 	Vertauschen der beiden Hälften eines Registers 	swap

Verzweigungen (Beispiele):
Befehl 		Bedeutung 
JMP 		unbedingter Sprung zu einer Adresse 		jump
BCC 		Verzweigen falls Bedingung cc erfüllt 		branch
BRA 		Verzweigen ohne Bedingungsabfrage 		branch always
CALL, JSR 	Sprung in ein Unterprogramm 			jump to subroutine
BSRCC 		JSR, wenn Bedingung cc erfüllt 			branch to subr.
RTS 		Rücksprung aus einem Unterprogramm 		return from subr.
TRAP, INT 	Sprung in Unterbrechungsroutine 		software interrupt
RTI, RTE	Rücksprung aus Unterbrechungsroutine 		return from int.

Cc-Bedingungen für Verzweigungen (Beispiele):
cc 	Bedingung 	Bedeutung
CS 	CF=1 		branch on carry set
CC 	CF=0 		branch on carry clear
VS 	OF=1 		branch on overflow
VC 	OF=0 		branch on not overflow
EQ 	ZF=1 		branch on zero/equal
NE 	ZF=0		branch on not zero/equal
MI 	SF=1		branch on minus
PL 	SF=0		branch on plus
PA 	PF=1		branch on parity/parity even
NP 	PF=0		branch on not parity/parity odd

Cc-Bedingungen für Verzweigungen (Beispiele):
vorzeichenlose Operanden:
cc	Bedingung	Bedeutung
LO 	CF=1		branch on lower than
HS 	CF=0 		branch on higher or same
LS 	CF ∨ ZF=1 	branch on lower or same
HI 	CF ∨ ZF=0 	branch on higher than

vorzeichenbehaftete Operanden
cc	Bedingung		Bedeutung
LT	SF / OF = 1		branch on less than	//SF = | OF=1
GE 	SF = | OF=0 		branch on greater or equal
LE 	ZF ∨ (SF = | OF)=1 	branch on less or equal
GT 	ZF ∨ (SF = | OF)=0 	branch on less greater than

Systemsteuerung (Beispiele):
Befehl 		Bedeutung 
NOP 		keine Operation 			no operation
WAIT 		Warten auf spezielles Eingangssignal 	wait
SYNC 		Warten auf einen Interrupt 		sync
HALT, STOP 	Anhalten des Prozessors			stop
RESET 		Rücksetzsignal für Pripherie 		reset
SVC 		Betriebssystem-Aufruf 			supervisor call

Typ und Länge der Operanden:
Operandentypen (Datentypen)
Der Typ der im Befehl adressierten Operanden wird allgemein im Befehl selbst
festgelegt. Die Codierung erfolgt dabei im Opcode zusammen mit der durchzuführenden Operation.
Alternativ wird auch die Abspeicherung von Typkennungen (Tag) zusammen mit
den Daten verwendet (Datenflußmaschinen, . . . ) verwendet. Sogenannte
"Tagged" Architekturen sind jedoch eher die Ausnahme.

Numerische Daten:
• vorzeichenlose ganze Zahlen (unsigned integer)
• vorzeichenbehaftete ganze Zahlen (signed integer)
• binär codierte Dezimalzahlen (binary coded decimal integer, BCD)
• Gleitkommazahlen (floating point)

Nichtnumerische Daten:
• alphanumerische Zeichen (characters, ASCII)
• Zeichenketten (character strings)
• Boolesche Werte (boolean values)
• Bitfelder (bit map)
• Zeiger, Adressen (pointer)

Operandenlänge (Datenformat):
Die Operandenlänge ist allgemein durch den Operandentyp gegeben, wobei pro
Typ auch unterschiediche Längen möglich sind (im Befehl codiert).

Beispiele: Folie 58 - 86



























